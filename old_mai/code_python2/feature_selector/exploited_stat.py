import os
import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt

X=pd.read_csv(r"data_input_feature_selector\brute_xyz\input_brute_xyz_400.txt",delimiter=',').sample(frac=1).reset_index(drop=True)

feature=X.columns

feature=list(feature)
for i,f in enumerate(list(feature)):
    
    feature[i]=f.strip()
    

X.columns=feature
feature.pop(0)
feature.pop(-1)

uniques,count=np.unique(X['mode'],return_counts=True)
mini=min(count)


X_stair=X[X['mode']=='stair'].iloc[0:mini,:]
X_elevator=X[X['mode']=='elevator'].iloc[0:mini,:]
X_escalator=X[X['mode']=='escalator'].iloc[0:mini,:]
X_still=X[X['mode']=='still'].iloc[0:mini,:]
X_walk=X[X['mode']=='walk'].iloc[0:mini,:]



feat_mean=np.where('mean' in feature)

list_stat=['mean','std','aad','sma','nb_step','arc','first_peak_index','second_peak_index',\
           'first_peak_value','second_peak_value','kurt','skew'
           ]

for col in list(feature):
    for stat in list_stat:
        if stat  in col:
            
            fig, axs = plt.subplots(5, figsize=(14, 10))
            
            axs[0].hist(X_stair[col],label='stair',color='b',bins=10)
            axs[1].hist(X_elevator[col],label='elevator',color='r',bins=10)
            axs[2].hist(X_escalator[col],label='escalator',color='g',bins=10)
            axs[3].hist(X_still[col],label='still',color='violet',bins=10)
            axs[4].hist(X_walk[col],label='walk',color='maroon',bins=10)
            
            for ax in axs:
                ax.legend()
                
                ax.set_xlim(min(X[col])-0.05*max(X[col]) ,max(X[col])+0.05*max(X[col]))
                
                ax.set_ylim(0 ,mini)
                
            plt.suptitle(col)
            plt.tight_layout()
            
            if not os.path.exists(f'graphics_stat/{stat}/'):
                    os.makedirs(f'graphics_stat/{stat}/')
            
            plt.savefig(f'graphics_stat/{stat}/comparaison_stat_{col.strip()}.png')
            
            plt.show()
        

        
        